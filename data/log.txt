canvas.before:
    Color:
        rgba: .5,.5,.5,1
    Line:
        width: 2
        rectangle: self.x,self.y,self.width,self.height

C:\Users\nguye\AppData\Local\Programs\Python\Python38\Tools\i18n\msgfmt.py base

 def on_touch_up(self, touch):
        """
        Wird aufgerufen, sobald der Benutzer sein Finger von den Bildschirm abhebt.
        Diese Funktion ist für die Wischfunktion in den Menübildschirm verantwortlich.
        Basierend auf die Richtung der Wisches, wird der nächste Bildschirm oder der vorherige
        Bildschirm aufgerufen.

        Diese Signatur wird von Kivy vorgegeben.

        Parameters
        ----------
        touch: MouseMotionEvent
            Das Objekt, das Daten über die Berührung wie z.B die Position enthält.
        """

        # touch.ox beinhaltet die Startposition des Touches
        if touch.x < touch.ox - self.app_config['swipe_distance']:
            self.manager.go_next_screen_of_group('settings')
        elif touch.x > touch.ox + self.app_config['swipe_distance']:
            self.manager.go_previous_screen_of_group('settings')

 def on_touch_move(self, touch):
        self.tick += 1
        if self.tick == self.max_tick:
            if len(self.points) == 0:
                return

            last_point = self.points.pop()
            new_point = touch.pos

            diff_x = last_point[0] - new_point[0]
            diff_y = last_point[1] - new_point[1]
            print(diff_x, diff_y)

            if diff_x > 0:
                diff_x = -1
            elif diff_x < 0:
                diff_x = 1
            else:
                diff_x = 0

            if diff_y > 0:
                diff_y = 1
            elif diff_y < 0:
                diff_y = -1
            else:
                diff_y = 0

            if diff_y == 0 and diff_x == 0:
                return

            print(diff_x, diff_y)
            self.rot.axis = (diff_y, diff_x, 0)
            print(self.rot.axis)
            self.update_glsl(1/60.)

            self.points.append(touch.pos)
            self.tick = 0
        super(Renderer, self).on_touch_move(touch)
