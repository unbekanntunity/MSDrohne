# ********************* BLuetooth-Verbindung ***********************
import bluetooth
import random
import struct
from time import sleep
import network
import ubinascii

from micropython import const
import drohne.wifi as wifi


_IRQ_CENTRAL_CONNECT = const(1)
_IRQ_CENTRAL_DISCONNECT = const(2)
_IRQ_GATTS_WRITE = const(3)

_FLAG_READ = const(0x0002)
_FLAG_WRITE_NO_RESPONSE = const(0x0004)
_FLAG_WRITE = const(0x0008)
_FLAG_NOTIFY = const(0x0010)

_UART_UUID = bluetooth.UUID("6E400001-B5A3-F393-E0A9-E50E24DCCA9E")
_UART_TX = (
    bluetooth.UUID("6E400003-B5A3-F393-E0A9-E50E24DCCA9E"),
    _FLAG_READ | _FLAG_NOTIFY,
)
_UART_RX = (
    bluetooth.UUID("6E400002-B5A3-F393-E0A9-E50E24DCCA9E"),
    _FLAG_WRITE | _FLAG_WRITE_NO_RESPONSE,
)
_UART_SERVICE = (
    _UART_UUID,
    (_UART_TX, _UART_RX),
)

_ADV_TYPE_FLAGS = const(0x01)
_ADV_TYPE_NAME = const(0x09)
_ADV_TYPE_UUID16_COMPLETE = const(0x3)
_ADV_TYPE_UUID32_COMPLETE = const(0x5)
_ADV_TYPE_UUID128_COMPLETE = const(0x7)
_ADV_TYPE_UUID16_MORE = const(0x2)
_ADV_TYPE_UUID32_MORE = const(0x4)
_ADV_TYPE_UUID128_MORE = const(0x6)
_ADV_TYPE_APPEARANCE = const(0x19)

PORTNUM = 9192
SEPARATOR = '|'
_MAX_NB_BYTES = 40

# Generate a payload to be passed to gap_advertise(adv_data=...).
def advertising_payload(limited_disc=False, br_edr=False, name=None, services=None, appearance=0):
    payload = bytearray()

    def _append(adv_type, value):
        nonlocal payload
        payload += struct.pack("BB", len(value) + 1, adv_type) + value

    _append(
        _ADV_TYPE_FLAGS,
        struct.pack("B", (0x01 if limited_disc else 0x02) + (0x18 if br_edr else 0x04)),
    )

    if name:
        _append(_ADV_TYPE_NAME, name)

    if services:
        for uuid in services:
            b = bytes(uuid)
            if len(b) == 2:
                _append(_ADV_TYPE_UUID16_COMPLETE, b)
            elif len(b) == 4:
                _append(_ADV_TYPE_UUID32_COMPLETE, b)
            elif len(b) == 16:
                _append(_ADV_TYPE_UUID128_COMPLETE, b)

    # See org.bluetooth.characteristic.gap.appearance.xml
    if appearance:
        _append(_ADV_TYPE_APPEARANCE, struct.pack("<h", appearance))

    return payload


class BLESimplePeripheral:
    def __init__(self, ble, name="mpy-uart"):
        self.connected = False
        self.wlan_connection = False
        self.nic = None

        self.paired_device_ip = None
        self.paired_device_conn_handle = None

        self._ble = ble
        self._ble.active(True)
        self._ble.irq(self._irq)
        ((self._handle_tx, self._handle_rx),) = self._ble.gatts_register_services((_UART_SERVICE,))
        self._ble.gatts_set_buffer(self._handle_tx, _MAX_NB_BYTES, False)
        self._ble.gatts_set_buffer(self._handle_rx, _MAX_NB_BYTES, False)
        self._ble.gatts_write(self._handle_tx, bytes(_MAX_NB_BYTES))
        self._ble.gatts_write(self._handle_rx, bytes(_MAX_NB_BYTES))

        self._connections = set()
        self._write_callback = None
        self._payload = advertising_payload(name=name, services=[_UART_UUID])
        self._advertise()

    def _irq(self, event, data):
        # Track connections so we can send notifications.
        if event == _IRQ_CENTRAL_CONNECT:
            conn_handle, _, _ = data
            print("New connection", conn_handle)
            self._connections.add(conn_handle)
        elif event == _IRQ_CENTRAL_DISCONNECT:
            conn_handle, _, _ = data
            print("Disconnected", conn_handle)
            self._connections.remove(conn_handle)
        elif event == _IRQ_GATTS_WRITE:
            conn_handle, value_handle = data
            value = self._ble.gatts_read(value_handle)

            message = ""
            for index in range(len(value)):
                message += chr(value[index])
            print(f'Message received: {message}')

            if 'WLANDATA' in message:
                self.paired_device_ip = message.split(SEPARATOR)[1]
            elif 'WLAN' in message:
                res, data, nic = self.try_connect(message)
                print(f'Connection result: {res}, {data}')
                if res == 1:
                    self.send(conn_handle, 'WC1')
                    self.send(conn_handle, f'STAINFO{SEPARATOR}{data[3][0]}{SEPARATOR}{PORTNUM}')
                    self.nic = nic

                    self.connected = True
                elif res == 2:
                    self.send(conn_handle, 'WC2')

            if self.paired_device_ip != None and self.connected:
                self.wlan_connection = True
                self.paired_device_conn_handle = conn_handle

            if value_handle == self._handle_rx and self._write_callback:
                self._write_callback(value)

    def try_connect(self, message):
        data = message.split(SEPARATOR)
        print(data)

        name = data[1]
        password = data[2]

        #WLAN|NAME|PASSWORD|ESP_STAINFO
        connected, sta_info, nic = wifi.connect(name, password)
        data.append(sta_info)
        data.append(nic)
        if connected and len(data) == 5:
            return (1, data, nic)
        else:
            return (2, [], None)

    def send(self, conn_handle, data):
        self._ble.gatts_notify(conn_handle, self._handle_tx, data)

    def is_connected(self):
        return len(self._connections) > 0

    def close(self):
        print('Bluetooth periphel closed')
        self._ble.active(False)

    def _advertise(self, interval_us=50000):
        print("Starting advertising")
        self._ble.gap_advertise(interval_us, adv_data=self._payload)

    def on_write(self, callback):
        self._write_callback = callback

